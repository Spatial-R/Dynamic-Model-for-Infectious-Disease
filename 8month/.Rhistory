statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")
) %>%
mif2(start = unlist(p),
Nmif = 50,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
}) -> sigmaSE_prof
bake("sigmaSE-profile1.rds",{
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mumps.hz[,-1] %>%
pomp(t0=with(mumps.hz,2*time[1]-time[2]),
time="time",
params=theta,
rprocess=euler.sim(rproc,delta.t=1/365.25),
initializer=initlz,
#skeleton=skel,
#skelmap.delta.t=1/365.25,
#skeleton.type="map",
dmeasure=dmeas,
rmeasure=rmeas,
covar=covar,
toEstimationScale=toEst,
fromEstimationScale=fromEst ,
tcovar="time",
zeronames=c("C","W"),
statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")) %>%
mif2(start = unlist(p),
Nmif = 50,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
}) -> sigmaSE_prof
p
estpars <- setdiff(names(theta),c("sigmaSE","mu","alpha","rho","iota"))
theta["alpha"] <- 1
theta.t <- partrans(m1,theta,"toEstimationScale")
theta.t.hi <- theta.t.lo <- theta.t
theta.t.lo[estpars] <- theta.t[estpars]-log(2)
theta.t.hi[estpars] <- theta.t[estpars]+log(2)
profileDesign(
sigmaSE=seq(from=log(0.02),to=log(0.2),length=20),
lower=theta.t.lo,upper=theta.t.hi,nprof=40
) -> pd
dim(pd)
theta.t
pd
pd <- as.data.frame(t(partrans(m1,t(pd),"fromEstimationScale")))
pairs(~sigmaSE+R0+mu+sigma+gamma+S_0+E_0,data=pd)
bake("sigmaSE-profile1.rds",{
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.options.multicore=mcopts,
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mumps.hz[,-1] %>%
pomp(t0=with(mumps.hz,2*time[1]-time[2]),
time="time",
params=theta,
rprocess=euler.sim(rproc,delta.t=1/365.25),
initializer=initlz,
dmeasure=dmeas,
rmeasure=rmeas,
covar=covar,
toEstimationScale=toEst,
fromEstimationScale=fromEst ,
tcovar="time",
zeronames=c("C","W"),
statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0"))
%>%
mif2(start = unlist(p),
Nmif = 50,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
}) -> sigmaSE_prof
bake("sigmaSE-profile1.rds",{
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.options.multicore=mcopts,
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mumps.hz[,-1] %>%
pomp(t0=with(mumps.hz,2*time[1]-time[2]),
time="time",
params=theta,
rprocess=euler.sim(rproc,delta.t=1/365.25),
initializer=initlz,
dmeasure=dmeas,
rmeasure=rmeas,
covar=covar,
toEstimationScale=toEst,
fromEstimationScale=fromEst ,
tcovar="time",
zeronames=c("C","W"),
statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")) %>%
mif2(start = unlist(p),
Nmif = 50,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
}) -> sigmaSE_prof
mumps.hz[,-1] %>%
pomp(t0=with(mumps.hz,2*time[1]-time[2]),
time="time",
params=theta,
rprocess=euler.sim(rproc,delta.t=1/365.25),
initializer=initlz,
dmeasure=dmeas,
rmeasure=rmeas,
covar=covar,
toEstimationScale=toEst,
fromEstimationScale=fromEst ,
tcovar="time",
zeronames=c("C","W"),
statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")) %>%
mif2(start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
p
mumps.hz[,-1] %>%
pomp(t0=with(mumps.hz,2*time[1]-time[2]),
time="time",
params=theta,
rprocess=euler.sim(rproc,delta.t=1/365.25),
initializer=initlz,
dmeasure=dmeas,
rmeasure=rmeas,
covar=covar,
toEstimationScale=toEst,
fromEstimationScale=fromEst ,
tcovar="time",
zeronames=c("C","W"),
statenames=c("S","E","I","R","C","W"),
paramnames=c("R0","mu","sigma","gamma","alpha","iota",
"rho","sigmaSE","psi","cohort","amplitude",
"S_0","E_0","I_0","R_0")) %>%
mif2(start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "geometric",
cooling.fraction.50 = 0.1,
transform = TRUE)
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000
)
rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02))
? mif2
pompExample(ou2)
guess1 <- guess2 <- coef(ou2)
guess1[c('x1.0','x2.0','alpha.2','alpha.3')] <- 0.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
guess2[c('x1.0','x2.0','alpha.2','alpha.3')] <- 1.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
m1 <- mif2(ou2,Nmif=100,start=guess1,Np=1000,
cooling.type="hyperbolic",cooling.fraction.50=0.05,
rw.sd=rw.sd(x1.0=ivp(0.5),x2.0=ivp(0.5),
alpha.2=0.1,alpha.3=0.1))
ou2
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "hyperbolic",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
p
unlist(p)
theta
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.options.multicore=mcopts,
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "hyperbolic",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.options.multicore=mcopts,
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "hyperbolic",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.options.multicore=mcopts,
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "hyperbolic",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
? foreach
foreach (p=iter(pd,"row"),
.combine=rbind,
.errorhandling="remove",
.inorder=FALSE
) %dopar% {
tic <- Sys.time()
require(magrittr)
require(plyr)
require(reshape2)
require(pomp)
options(stringsAsFactors=FALSE)
mif2(m1,start = unlist(p),
Nmif = 5000,
rw.sd = rw.sd(
R0=0.02,sigma=0.02,gamma=0.02,psi=0.02,cohort=0.02,amplitude=0.02,
S_0=ivp(0.02),E_0=ivp(0.02),I_0=ivp(0.02),R_0=ivp(0.02)),
Np = 10000,
cooling.type = "hyperbolic",
cooling.fraction.50 = 0.1,
transform = TRUE) %>%
mif2() -> mf
## Runs 10 particle filters to assess Monte Carlo error in likelihood
pf <- replicate(10, pfilter(mf, Np = 2000))
ll <- sapply(pf,logLik)
ll <- logmeanexp(ll, se = TRUE)
nfail <- sapply(pf,getElement,"nfail")
toc <- Sys.time()
etime <- toc-tic
units(etime) <- "hours"
data.frame(as.list(coef(mf)),
loglik = ll[1],
loglik.se = ll[2],
nfail.min = min(nfail),
nfail.max = max(nfail),
etime = as.numeric(etime))
}
library(maptools)
dat<-readShapePoly("/media/spatial-r/Seagate Backup Plus Drive/Maps")
dat<-readShapeSpatial("/media/spatial-r/Seagate Backup Plus Drive/Maps")
dat<-getinfo.shape("/media/spatial-r/Seagate Backup Plus Drive/Maps")
dat<-getinfo.shape("/media/spatial-r/Seagate Backup Plus Drive/Maps/Zhejiang3.shp")
dat<-readShapePoly("/media/spatial-r/Seagate Backup Plus Drive/Maps/Zhejiang3.shp")
dat<-readShapePoly("/media/spatial-r/Seagate Backup Plus Drive/Maps/zhejiang3.shp")
plot(dat)
dat<-readShapePoly("/home/spatial-r/E盘/网上数据/地图数据/ZJ/zhejiang3.shp")
plot(dat)
dat@data
shiny::runApp('~/Downloads/ShinyAppforClinic')
gc()
?foreach
library(pomp)
?foreach
library(foreach)
?foreach
shiny::runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
library(dplyr);library(RColorBrewer);library(RCurl);library(showtext)
library(ggplot2);library(shiny);library(leaflet);library(RJSONIO)
font.add("wqy", regular = "wqy-microhei.ttc")
wqy
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
runApp('~/Downloads/ShinyAppforClinic')
library(surveillance)
data()
data(measles.weser)
str(measles.weser)
measles.weser$neighbourhood
measles.weser$observed
str(measles.weser)
data(MMRcoverageDE )
MMRcoverageDE
measles.weser$neighbourhood
cases<-measles.weser$observed;
View(cases)
MMRcoverageDE[1:15,4]
setwd("~/E盘/Measles-Experiment")
source('~/E盘/Measles-Experiment/8month/Measles_sim.R')
source('~/E盘/Measles-Experiment/8month/Measles_sim.R')
setwd("~/E盘/Measles-Experiment/8month")
source('~/E盘/Measles-Experiment/8month/Measles_sim.R')
source('~/E盘/Measles-Experiment/8month/Measles_sim.R')
source('~/E盘/Measles-Experiment/8month/Measles_sim.R')
matrix(disease.state,ncol=6,byrow = T)
